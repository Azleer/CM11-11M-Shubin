#ifndef MYLIST_H
#define MYLIST_H

#include <iostream>
#include <stdint.h>


template<typename TYPE>
class Node
{
public:

    Node* next;
    Node* prev;
    TYPE  Cont;

    Node(TYPE value)
    {
        next = nullptr;
        prev = nullptr;
        Cont = value;
    }

};

template<typename TYPE>
class MyList
{
private:
    Node<TYPE>* Tail;
    Node<TYPE>* Head;
    size_t conuntOfNods = 0;

public:

    MyList();

    void push_front(Node<TYPE> &obj);
    void push_back(Node<TYPE> &obj);
    void insert(Node<TYPE> &obj, size_t index);




};

template<typename TYPE>
MyList<TYPE>::MyList()
{
    Tail = nullptr;
    Head = nullptr;
    conuntOfNods = 0;
}

template<typename TYPE>
void MyList<TYPE>::push_front(Node<TYPE> &obj)
{

    if(Head != nullptr) {
        Head->prev = obj.next;
        Head = obj.prev;
    } else {
        this->Head = obj.prev;
        this->Tail = obj.prev;
        obj.next = nullptr;
    }
}

template<typename TYPE>
void MyList<TYPE>::insert(Node<TYPE> &obj, size_t index)
{
    if(Head == nullptr) { // Элементов нет. Добавляем самый первый эл.
        Head = &obj;
        Tail = &obj;
        obj.prev = nullptr;
        obj.next = nullptr;
        this->conuntOfNods++;
    }

    if (index == 1) {
        obj.prev = nullptr;
        obj.next = Head;
        Head = &obj;
    }

    if (index == this->conuntOfNods) {// Добавляем элемент в конец.

        Tail->next = &obj;
        obj.prev = Tail;
        obj.next = nullptr;
        Tail = &obj;
        this->conuntOfNods++;

    } else {               // Добавляем между элементами.

        Node<TYPE>* it;
        if(index <= conuntOfNods/2) {
        // Идет к эл. с начала списка
            it = Head;
            for (size_t to = 1; to < index; ++to) {
                it = it->next;
            }

        } else {
        //Идем с конца списка;
            it = Tail;
            for (size_t to = conuntOfNods; to > index; --to) {
                it = it->prev;
            }
        }
        std::cout << "asd" << std::endl;

        //obj.next = it->next;
        //obj.prev = it;

       // (it->next)->prev = &obj;
       // it->next = &obj;

    }


}




#endif // MYLIST_H


